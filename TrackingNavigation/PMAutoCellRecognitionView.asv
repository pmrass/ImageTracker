classdef PMAutoCellRecognitionView
    %PMMOVIETRACKINGSETTINGS Summary of this class goes here
    %   Detailed explanation goes here
    
    properties (Access = private)
        MainFigure
        
        FolderAnnotation
        ListWithPaths
        
        ListWithChannels
        ListWithFrames
        ListWithPlaneSettings
        
        FilterForHighDensityDistance
        FilterForHighDensityNumber
        
        ProcedureSelection
        
        StartButton
        
    end
    
    properties (Access = private, Constant)
        BottomContentRow = 100;
        TopContentRow =     630;
 
        
    end
    
    methods

        
        function obj = PMAutoCellRecognitionView(varargin)
            %PMMOVIETRACKINGSETTINGS Construct an instance of this class
            %   Detailed explanation goes here
            
            NumberOfArguments = length(varargin);
           
            switch NumberOfArguments
                case 0
                    obj = obj.createView;
                otherwise
                    error('Wrong input.')
                
            end
            
            
            
            
           
        end
        
        function obj = setChannels(obj, Value)
            obj.ListWithChannels.Data =                       Value;    
        end
        
        function obj = setPlaneSettings(obj, Value)
             obj.ListWithPlaneSettings.Data =          Value;
             number = size(Value, 1);
             Title = arrayfun(@(x) ['Plane ', num2str(x)], (1:number)', 'UniformOutput', false);
              obj.ListWithPlaneSettings.RowName = Title;
              
              obj.ListWithPlaneSettings.Data =          Value;
              obj.ListWithPlaneSettings.ColumnEditable = true;
              
        end
        
        function obj = setFrames(obj, Value)
            obj.ListWithFrames.Data =         Value;     
           
        end
        
        function obj = setHighDensityDistances(obj, Value)
            obj.FilterForHighDensityDistance.Value =       Value; 
        end
        
        function obj = setHighDensityNumbers(obj, Value)
            obj.FilterForHighDensityNumber.Value =        Value;
        end
        
        
        function obj = setCallBacks(obj, varargin)
            
            NumberOfArguments = length(varargin);
            switch NumberOfArguments
                case 2
                    
                    
        ListWithFrames
                    obj.ListWithChannels.DisplayDataChangedFcn =   varargin{3};
                    obj.ListWithPlaneSettings.DisplayDataChangedFcn =   varargin{3};
                    obj.ListWithPlaneSettings.DisplayDataChangedFcn =   varargin{3};
                    obj.StartButton.ButtonPushedFcn =                   varargin{4};
                    
                otherwise
                    error('Wrong input.')
                
            end
            
        end
        
        function selection = getUserSelection(obj)
           selection = obj.ProcedureSelection.Value;
        end
        

    end
    
    methods (Access = private)
        
        function obj = createView(obj)

            obj =       obj.createFigure;
         
            obj =       obj.setFramePanels;
            obj =       obj.setPlanePanels;
            obj =       obj.setChannelPanels;
         
            obj =       obj.setHighDensityPanels;
            
            obj =       obj.setActionPanels;
             
        end
        
        function obj = createFigure(obj)
            ScreenSize =                                get(0,'screensize');
            Height =                                    ScreenSize(4) * 0.95;
            Left =                                      ScreenSize(3) * 0.3;
            Width =                                     ScreenSize(3) * 0.6;
            MyFigure =                                  uifigure;
            MyFigure.Position =                         [20 0 Width Height];            
            obj.MainFigure =                            MyFigure;

        end
        
        function height = getHeight(obj)
            height = obj.MainFigure.Position(4);
        end
        
        function width = getWidth(obj)
            width = obj.MainFigure.Position(3);
        end
        
        function obj = setChannelPanels(obj)
            obj.ListWithChannels =                              uitable(obj.MainFigure);
            obj.ListWithChannels.Position =                    [obj.getWidth * 0.05 obj.TopContentRow  obj.getWidth * 0.2 200 ];
            obj.ListWithChannels.RowName =                     '';
            obj.ListWithChannels.ColumnName =                  'Channels';
            
        end
        
        function obj =   setHighDensityPanels(obj)
            ColumnPosition = obj.getWidth * 0.3;
            
            FilterForHighDensityTitle =                         uilabel(obj.MainFigure);
            FilterForHighDensityTitle.Position =               [ColumnPosition obj.TopContentRow + 80 200 20 ]; 
            FilterForHighDensityTitle.Text =                  'Filter out dense events:';

            FilterForHighDensityDistanceTitle =                 uilabel(obj.MainFigure);
            FilterForHighDensityDistanceTitle.Position =          [ColumnPosition obj.TopContentRow + 60 200 20 ];   
            FilterForHighDensityDistanceTitle.Text =            'Diameter (radius)';

            obj.FilterForHighDensityDistance =                  uieditfield(obj.MainFigure);
            obj.FilterForHighDensityDistance.Position =         [ColumnPosition obj.TopContentRow + 40 200 20 ];    

            FilterForHighDensityNumberTitle =                   uilabel(obj.MainFigure);
            FilterForHighDensityNumberTitle.Position =           [ColumnPosition obj.TopContentRow + 20  200 20 ];   
            FilterForHighDensityNumberTitle.Text =              'Maximum number:';

            obj.FilterForHighDensityNumber =                    uieditfield(obj.MainFigure);
            obj.FilterForHighDensityNumber.Position =           [ColumnPosition obj.TopContentRow 200 20 ];  

        end
          
        
        
        function obj = setFramePanels(obj)
            obj.ListWithFrames =                                uitable(obj.MainFigure);
             % obj.ListWithFrames.Value =                        'New sample';
            obj.ListWithFrames.Position =                       [obj.getWidth * 0.05 obj.BottomContentRow  obj.getWidth * 0.2 500 ];
            obj.ListWithFrames.ColumnName =                     {'Available frames'};

        end
        
        function obj = setPlanePanels(obj)
            obj.ListWithPlaneSettings =                         uitable(obj.MainFigure);
            obj.ListWithPlaneSettings.Position =                [obj.getWidth * 0.3, obj.BottomContentRow, obj.getWidth * 0.6, 500  ];
            obj.ListWithPlaneSettings.ColumnName =              {'Minimum radius', 'Maximum radius', 'Sensitivity', 'EdgeThreshold'};
           
        end
        
        
            
        
        function obj = setActionPanels(obj)
            
            obj.ProcedureSelection  =               uidropdown(obj.MainFigure);
            obj.ProcedureSelection.Position =       [obj.getWidth * 0.5 50  obj.getWidth * 0.4 20 ];
            obj.ProcedureSelection.Items =          {'Interpolate plane settings', 'Circle recognition'};
            obj.ProcedureSelection.Value =          'Circle recognition';

            obj.StartButton =                       uibutton(obj.MainFigure);
            obj.StartButton.Position =              [obj.getWidth * 0.5 20  obj.getWidth * 0.4 20 ];
            obj.StartButton.Text =                  'Start';
         
            
            
        end
        
        
        
    end
    
    
    
    
    
end

