classdef PMCellomicsImages
    %PMCELLOMICSIMAGES For reading image data generated by Cellomics

    properties (Access = private)
        Folder
        Well
        
        MinimumIntensity
        MaximumIntensity
        MinimumSize
        
        MovieTrackings
        
        Channel
                                                                    
    end
    
    methods (Static)
       
         function vector = getColumnString(Letters, Number)
                vector =  arrayfun(@(x) sprintf('%s%02.0f', Letters(x), Number), (1 : length(Letters))', 'UniformOutput', false);
            
         end
         
         function vector = getRowString(Letter, Numbers)
             
             vector =  arrayfun(@(x) sprintf('%s%02.0f', Letter, x), Numbers, 'UniformOutput', false);
         end
        
    end
    
    methods % INITIALIZATION:
        
        function obj = PMCellomicsImages(varargin)
            %PMCELLOMICSIMAGES Construct an instance of this class
            %   Takes 2 arguments:
            % 1: folder-name with images (character string)
            % 2: key for well: e.g.: 'C09': letter for row, followed by two digits for column;
            switch length(varargin)
               
                case 5
                    obj.Folder =                varargin{1};
                    obj.Well =                  varargin{2};
                    obj.MinimumIntensity=       varargin{3};
                    obj.MaximumIntensity=       varargin{4};
                    obj.MinimumSize=            varargin{5};
                    
                case 6
                    obj.Folder =                varargin{1};
                    obj.Well =                  varargin{2};
                    obj.MinimumIntensity=       varargin{3};
                    obj.MaximumIntensity=       varargin{4};
                    obj.MinimumSize=            varargin{5};
                    obj.Channel =               varargin{6};
                    
                    
                    
                otherwise
                    error('Wrong input.')
                
                
            end
                
        end
        
       
        
       
    end
    
    methods % SETTERS
        
        function obj = setMovieTrackingObjects(obj)
            
            
            Names = obj.getImageFileNames;
            obj.MovieTrackings = cell(length(Names), 1);
            
            for index = 1 : length(Names)
                
                myMovieTracking =                       PMMovieTracking(...
                                                                        Names{index}, ...
                                                                        obj.Folder, ...
                                                                        {Names{index}}, ...
                                                                        obj.Folder...
                                                                        );
                                                                    
                myMovieTracking =                       myMovieTracking.setPropertiesFromImageMetaData;
                obj.MovieTrackings{index, 1} =            myMovieTracking;
                      
            end
            
        end
        
    end
    
    methods % ACTION:
        
        function obj = performSegmentation(obj)

         
        end

        function Image = getImage(obj)
            
            myFigure =  PMFigure;
            
            
            myFigure =                              myFigure.showFigure;
            myFigure.getFigureHandle.Colormap =     colormap(gray);
          
            myFigure =                              myFigure.makeFullScreen('Square');
            
            axes =                                  myFigure.fillWithAxes(5, 5);
            
            IndicesForImage =                       [13; 14; 19; 18; 17; 12; 7; 8; 9; 10; 15; 20; 25; 24; 23; 22; 21; 16; 11; 6; 1; 2 ;3; 4; 5];
            
            myMovieTrackings =                      obj.getMovieTracking;
            
         
            
            for index = 1 : length(myMovieTrackings)
                   CurrentMovie = myMovieTrackings{index};
                   
                   AxesHandleImage = IndicesForImage(index);
                   
                      thresholder =                    PMMovieTracking_ShapeThresholding(...
                                                                            CurrentMovie, ...
                                                                           obj.MinimumIntensity, ...
                                                        obj.MaximumIntensity, ...
                                                        obj.MinimumSize, ...
                                                                            NaN ...
                                                                        );

                    myImage = thresholder.getShapeImage;

                    %figure(myFigure)
                  %  myImagehandle = imshow(myImage);


                        myImagehandle = image(myImage * 255);

                     myImagehandle.Parent = axes(AxesHandleImage);

                     axes(AxesHandleImage).YLim = [0 myImagehandle.YData(2)];
                     axes(AxesHandleImage).XLim = [0 myImagehandle.XData(2)];

             %       axes(index).OuterPosition = OriginalOuterPosition;
             %       axes(index).Position = OriginalPosition;
              %       axes(index).InnerPosition = OriginalOuterPosition;    


                
            end
            
            
            
              Image =         frame2im(getframe(myFigure.getFigureHandle));
              
              myFigure.close;
              
        end
        
    end
    
    methods % GETTERS:
        

        function  Names = getImageFileNames(obj)


            myFile =        PMFile(obj.Folder);
            if isempty(obj.Channel)
                Filter =        {obj.Well; '.TIFF'};
            else
                Filter =        {obj.Well; '.TIFF'; obj.Channel};
            end
            
            Names =         myFile.getFileNamesInDirectory(Filter);

            assert(~isempty(Names), fprintf('No files in source folder %s found.', obj.Folder))
            
        end

        function numbers = getNumberOfForeGroundPixels(obj)
           
              IndicesForImage =            [21; 22; 23; 24; 25; 20; 7; 8; 9; 10; 19; 6; 1; 2; 11; 18; 5; 4; 3; 12; 17; 16 ;  15; 14; 13];
         
               
            myMovieTrackings = obj.getMovieTracking;
            
            numbers = nan(length(myMovieTrackings), 1);
            
            for index = 1 : length(myMovieTrackings)
            
                
                try 
               thresholder =                    PMMovieTracking_ShapeThresholding(...
                                                        myMovieTrackings{IndicesForImage(index)}, ...
                                                        obj.MinimumIntensity, ...
                                                        obj.MaximumIntensity, ...
                                                        obj.MinimumSize, ...
                                                        NaN ...
                                                    );

                numbers(index, 1) =                   thresholder.getNumberOfShapePixels;
                
                catch
                    error('Something went wrong')
                end
                            
            end
            
        end
        
         function myMovieTrackings = getMovieTracking(obj)
            %GETMOVIETRACKING returns vector of PMMovieTracking objects for all images of set well;
            
          
            
            myMovieTrackings =  obj.MovieTrackings;
            
                    
         end
         
        
        
        
    end
    
    methods (Access = private)
        
        
    end
    
end

